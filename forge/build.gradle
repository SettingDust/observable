plugins {
    id "com.github.johnrengelman.shadow" version "7.1.1"
    id 'org.jetbrains.kotlin.jvm'
    id "me.shedaniel.unified-publishing"
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {

    forge {
//        useFabricMixin = true

        mixinConfig "observable.common.json"
    }
}


configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.minecraft_version}-${rootProject.forge_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-forge:${rootProject.architectury_version}"

//    implementation(project(path: ":common")) {
//        transitive = false
//    }
//    developmentForge(project(path: ":common")) {
//        transitive = false
//    }
    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) {
        transitive = false
    }
    shadowCommon("org.jetbrains.kotlinx:kotlinx-serialization-protobuf-jvm:1.3.1") {
        transitive = false
    }

    forgeRuntimeLibrary("org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version")
    forgeRuntimeLibrary("org.jetbrains.kotlinx:kotlinx-serialization-protobuf-jvm:$kotlin_serialization_version")
    forgeRuntimeLibrary("org.jetbrains.kotlinx:kotlinx-serialization-json:$kotlin_serialization_version")
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    outputs.upToDateWhen { false }

    exclude "fabric.mod.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier =  "dev-shadow"

    exclude "**/*.kotlin_metadata"

    relocate 'kotlinx.serialization.protobuf', 'observable.shadow.kotlinx.serialization.protobuf'
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier = null
}

jar {
    archiveClassifier = "dev"
}

java {
    withSourcesJar()
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

// Credit to shedaniel (architectury) for most of this
unifiedPublishing {
    project {
        displayName = "$project.version (forge)"
        releaseType = "$rootProject.release_channel"
        changelog = "See Observable's GitHub releases page for all changes between versions."
        gameVersions = ["$project.minecraft_version"]
        gameLoaders = ["forge"]
        mainPublication remapJar
        relations {
            depends {
                curseforge = "architectury-api"
                modrinth = "architectury-api"
            }
        }

        var CURSE_API_KEY = project.findProperty("CURSE_API_KEY") ?: System.getenv("CURSE_API_KEY")
        if (CURSE_API_KEY != null) {
            curseforge {
                token = CURSE_API_KEY
                id = rootProject.curseforge_id
                gameVersions.addAll "Java 17"
            }
        }

        var MODRINTH_TOKEN = project.findProperty("MODRINTH_TOKEN") ?: System.getenv("MODRINTH_TOKEN")
        if (MODRINTH_TOKEN != null) {
            modrinth {
                token = MODRINTH_TOKEN
                id = rootProject.modrinth_id
                version = "$project.version+$project.name"
            }
        }
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                classifier null
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
repositories {
    mavenCentral()
}
compileKotlin {
    kotlinOptions.jvmTarget = "17"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "17"
}
